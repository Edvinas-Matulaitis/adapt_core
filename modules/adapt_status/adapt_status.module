<?php

/**
 * Implements hook_menu().
 */
function adapt_status_menu() {
  $items = array();

  $items['admin/config/system/adapt-status'] = array(
    'title' => 'Adapt status',
    'description' => 'Configuration page for Adapt Status',
    'access callback' => TRUE,
    'page callback' => 'drupal_get_form',
    'page arguments' => array('adapt_status_settings'),
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Form callback for the module settings form.
 */
function adapt_status_settings($form, $form_state) {

  $form['adapt_status_remote_endpoint'] = array(
    '#title' => t('Remote endpoint'),
    '#type' => 'textfield',
    '#default_value' => variable_get('adapt_status_remote_endpoint', ''),
    '#required' => TRUE,
  );

  $form['adapt_status_site_id'] = array(
    '#title' => t('Site identifier'),
    '#type' => 'textfield',
    '#default_value' => variable_get('adapt_status_site_id', 'dev'),
    '#required' => TRUE,
  );

  $form['adapt_status_enabled'] = array(
    '#title' => t('Push enabled'),
    '#type' => 'checkbox',
    '#default_value' => variable_get('adapt_status_enabled', 0),
  );

  return system_settings_form($form);
}

/**
 * Validate callback for the adapt status settings form.
 *
 * @see adapt_status_settings
 */
function adapt_status_settings_validate($form, &$form_state) {
  if (!valid_url($form_state['values']['adapt_status_remote_endpoint'])) {
    form_set_error('adapt_status_remote_endpoint', t('Remote endpoint must be a valid url.'));
  }
}

function adapt_status_cron() {

  $remote_site = variable_get('adapt_status_remote_endpoint', '');
  $enabled = variable_get('adapt_status_enabled', 0);

  if (!empty($remote_site) && $enabled == 1) {

    $data = _adapt_status_status_data();

    // Alter hook to make the dataset alterable just in case.
    drupal_alter('adapt_status_data', $data);

    $options = array();
    $options['method'] = 'POST';
    $options['data'] = drupal_json_encode($data);
    $options['headers'] = array('Content-Type' => 'text/json; charset=UTF-8');

    $res = drupal_http_request($remote_site, $options);

    if ($res->code != 200) {
      watchdog('adapt_status', 'Cron failed. HTTP request status code %code with message: %message', array('%code' => $res->code, '%message' => $res->status_message), WATCHDOG_ERROR);
    }
  }
}

/**
 * Return JSON formatted module information.
 */
function _adapt_status_status_data() {
  $system_modules = system_list('module_enabled');
  $system_themes = list_themes(TRUE);

  // Needless initialisation, but hey.
  $res = array(
    "core" => array(),
    "contrib" => array(),
    "custom" => "disabled",
  );

  // Go over Themes
  foreach($system_themes as $theme) {
    if(isset($theme->info['package']) && $theme->info['package'] == 'Core')
      continue;

    if(isset($theme->info['version']))
      $res['contrib'][$theme->name] = array("version" => $theme->info['version']);
  }

  // Go over Modules
  foreach ($system_modules as $module => $module_info) {
    $filename = $module_info->filename;

    // Match for contrib modules.
    $regex = '{^sites\/([A-z,\.,\-]+)\/modules\/*}';
    if (preg_match($regex, $filename)) {
      // if this is part of a project, only set the project.
      if(isset($module_info->info['project'])) {
        $res['contrib'][$module_info->info['project']] = array("version" => $module_info->info['version']);
      }
      else {
        $res['contrib'][$module] = array("version" => $module_info->info['version']);
      }
    }

    // Match for core modules.
    if (strtolower($module_info->info['package']) == "core") {
      // if this is part of a project, only set the project.
      if(isset($module_info->info['project'])) {
        $res['core'][$module_info->info['project']] = array("version" => $module_info->info['version']);
      }
      else {
        $res['core'][$module] = array("version" => $module_info->info['version']);
      }
    }

    // doublecheck if drupal version is reported, if not add bootstrap define
    if(!isset($res['core']['drupal'])) {
      $res['core']['drupal'] = array("version" => VERSION);
    }
  }

  // Check libraries
  if (module_exists('libraries')) {
    $res['libraries'] = array();
    foreach (libraries_get_libraries() AS $name => $path) {
      $res['libraries'][] = $name;
    }
  }

  // Check jQuery version
  if (module_exists('jquery_update')) {
    $res['jquery_version'] = variable_get('jquery_update_jquery_version', '1.5');
  }
  else {
    $res['jquery_version'] = '1.4';
  }

  return $res;
}
