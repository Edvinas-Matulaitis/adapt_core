<?php
/**
 * @file
 * Provides extra Features export options.
 *
 * Code taken from https://gist.github.com/tobiasbaehr/7292175
 *
 *  - Custom date formats
 *  - Date format types
 */

/**
 * Implements hook_features_api().
 */
function adapt_features_features_api() {
  $components = array(
    'custom_date_formats' => array(
      'name' => t('Custom date formats'),
      'default_hook' => 'custom_date_formats',
      'feature_source' => TRUE,
    ),
    'date_format_types' => array(
      'name' => t('Date format types'),
      'default_hook' => 'date_format_types',
      'feature_source' => TRUE,
    ),
  );

  return $components;
}

/**
 * Implements hook_features_export_options().
 */
function custom_date_formats_features_export_options() {
  $formats = system_get_date_formats('custom');
  $options = array();
  if (!empty($formats)) {
    foreach ($formats as $format => $format_data) {
      $options[$format] = $format;
    }
  }
  return $options;
}

/**
 * Implements hook_features_export_options().
 */
function date_format_types_features_export_options() {
  $options = array();
  $format_types = system_get_date_types();
  foreach ($format_types as $type => $format_type) {
    $options[$type] = $format_type['title'];
  }
  return $options;
}

/**
 * Implements hook_features_export().
 */
function custom_date_formats_features_export($data, &$export, $module_name = '') {
  $export['dependencies']['features'] = 'features';
  $export['dependencies']['adapt_features'] = 'adapt_features';

  foreach ($data as $format) {
    $map = features_get_default_map('custom_date_formats');
    if (!empty($map[$format]) && $map[$format] != $module_name) {
      $export['dependencies'][$map[$format]] = $map[$format];
    }
    else{
      $export['features']['custom_date_formats'][$format] = $format;
    }
  }

  return array();
}

/**
 * Implements hook_features_export().
 */
function date_format_types_features_export($data, &$export, $module_name = '') {
  $export['dependencies']['adapt_features'] = 'adapt_features';
  $pipe = array('variable' => array());
  $map_variable = features_get_default_map('variable');
  $map_custom_formats = features_get_default_map('custom_date_formats');
  $map_date_format_types = features_get_default_map('date_format_types');
  foreach ($data as $type) {
    // Only add format type to export, if it is available.
    if ($spec = system_get_date_types($type)) {
      $variable = 'date_format_' . $type;

      // Add a dependency when the variable already in a feature but not by use.
      if (isset($map_variable[$variable]) && $map_variable[$variable] != $module_name) {
        $export['dependencies'][$map_variable[$variable]] = $map_variable[$variable];
      }
      else {
        // Add strongarm variable for given default date format for this type.
        $pipe['variable'][$variable] = $variable;
      }

      $default_format = _get_default_format($type);

      // Add a dependency when the default date format is a custom date format and already in a feature but not by use.
      if (isset($map_custom_formats[$default_format]) && $map_custom_formats[$default_format] != $module_name) {
        $export['dependencies'][$map_custom_formats[$default_format]] = $map_custom_formats[$default_format];
      }
      else {
        // Add custom date format for this type.
        $pipe['custom_date_formats'][$default_format] = $default_format;
      }

      // Add a dependency when the date_format_type already in a feature but not by use.
      if (isset($map_date_format_types[$type]) && $map_date_format_types[$type] != $module_name) {
        $export['dependencies'][$map_date_format_types[$type]] = $map_date_format_types[$type];
      }
      else {
        $export['features']['date_format_types'][$type] = $type;
      }

    }
  }
  return $pipe;
}

/**
 * Implements hook_features_export_render().
 */
function custom_date_formats_features_export_render($module, $data, $export = NULL) {
  $formats = system_get_date_formats('custom');
  $code = array();
  $code[] = '  $custom_date_formats = array();';

  foreach ($data as $format) {
    if (!empty($formats[$format])) {
      $format = features_var_export($format);
      $code[] = "  \$custom_date_formats[{$format}] = {$format};";
    }
  }

  $code[] = '  return $custom_date_formats;';
  $code = implode("\n", $code);

  return array('custom_date_formats' => $code);
}

/**
 * Implements hook_features_export_render().
 */
function date_format_types_features_export_render($module, $data, $export = NULL) {
  $code = array();
  $code[] = '  $format_types = array();';

  foreach ($data as $type) {
    if ($spec = system_get_date_types($type)) {
      $format_export = features_var_export($spec['title'], '  ');
      $format_identifier = features_var_export($type);
      $code[] = "  // Exported date format type: $type";
      $code[] = "  \$format_types[{$format_identifier}] = {$format_export};";
    }
  }
  $code[] = '  return $format_types;';
  $code = implode("\n", $code);

  return array('date_format_types' => $code);
}

/**
 * Implements hook_features_rebuild().
 */
function custom_date_formats_features_rebuild($module) {
  return custom_date_formats_features_revert($module);
}

/**
 * Implements hook_features_revert().
 */
function custom_date_formats_features_revert($module) {
  $defaults = features_get_default('custom_date_formats', $module);
  if (!$defaults) {
    return;
  }

  $formats = system_get_date_formats('custom');

  foreach ($defaults as $format) {
    // If it already exists don't re-save it.
    if (isset($formats[$format])) {
      continue;
    }

    $data = array(
      'format' => trim($format),
      'type' => 'custom',
      'locked' => 0,
      'is_new' => 1,
    );

    system_date_format_save($data);
  }
}

/**
 * Helper function to get the pure format (from variable).
 */
function _get_default_format($type) {
  // Do not use variable_get() as this may fetch an already localized variable.
  $format = db_query('SELECT value FROM {variable} WHERE name = :name', array(':name' => 'date_format_' . $type))->fetchField();
  return ($format !== FALSE) ? unserialize($format) : NULL;
}
